// Internationalization utilities for VNPT eKYC
import { useState, useEffect } from 'react';

export type Language = 'vi' | 'en';

export interface TranslationKeys {
  // Common
  common: {
    loading: string;
    error: string;
    success: string;
    cancel: string;
    confirm: string;
    back: string;
    next: string;
    retry: string;
    close: string;
    save: string;
    delete: string;
    edit: string;
    view: string;
  };

  // Header
  header: {
    title: string;
    hotline: string;
    language: string;
  };

  // Steps
  steps: {
    step: string;
    of: string;
    documentSelection: string;
    documentCapture: string;
    faceVerification: string;
    review: string;
  };

  // Document Selection
  documentSelection: {
    title: string;
    subtitle: string;
    cccd: string;
    passport: string;
    driver: string;
    qr: string;
    other: string;
  };

  // Document Capture
  documentCapture: {
    frontTitle: {
      cccd: string;
      passport: string;
      driver: string;
    };
    backTitle: string;
    subtitle: string;
    instruction: string;
    captureButton: string;
    uploadButton: string;
    guide: string;
  };

  // QR Scanner
  qrScanner: {
    title: string;
    subtitle: string;
    scanning: string;
    success: string;
    error: string;
  };

  // Face Verification
  faceVerification: {
    tutorialTitle: string;
    tutorialSubtitle: string;
    tutorialContent: string;
    startButton: string;
    captureTitle: string;
    captureSubtitle: string;
    instructions: {
      lookStraight: string;
      smile: string;
      turnRight: string;
      turnLeft: string;
      complete: string;
    };
    faceDetected: string;
  };

  // Review
  review: {
    title: string;
    subtitle: string;
    imagesTitle: string;
    frontLabel: string;
    backLabel: string;
    faceLabel: string;
    qualityGood: string;
    qualityPoor: string;
    infoTitle: string;
    idNumber: string;
    fullName: string;
    dateOfBirth: string;
    address: string;
    issueDate: string;
    expiry: string;
    faceMatchTitle: string;
    faceMatchHigh: string;
    faceMatchMedium: string;
    faceMatchLow: string;
    submitButton: string;
    retryButton: string;
  };

  // Success
  success: {
    title: string;
    subtitle: string;
    confirmButton: string;
  };

  // Errors
  errors: {
    cameraAccess: string;
    ocrFailed: string;
    faceNotDetected: string;
    qrNotFound: string;
    validationFailed: string;
    networkError: string;
    sessionExpired: string;
    imageQuality: string;
    faceMatchFailed: string;
  };

  // Validation
  validation: {
    required: string;
    invalidFormat: string;
    invalidDate: string;
    invalidId: string;
    imageTooSmall: string;
    imageTooLarge: string;
    imageTooDark: string;
    imageTooLight: string;
    lowContrast: string;
    blurryImage: string;
  };

  // Quality Assessment
  quality: {
    excellent: string;
    good: string;
    fair: string;
    poor: string;
    recommendations: {
      improveLight: string;
      avoidGlare: string;
      moveCloser: string;
      moveFarther: string;
      centerDocument: string;
      holdSteady: string;
    };
  };
}

const translations: Record<Language, TranslationKeys> = {
  vi: {
    common: {
      loading: 'ƒêang t·∫£i...',
      error: 'L·ªói',
      success: 'Th√†nh c√¥ng',
      cancel: 'H·ªßy',
      confirm: 'X√°c nh·∫≠n',
      back: 'Quay l·∫°i',
      next: 'Ti·∫øp theo',
      retry: 'Th·ª≠ l·∫°i',
      close: 'ƒê√≥ng',
      save: 'L∆∞u',
      delete: 'X√≥a',
      edit: 'S·ª≠a',
      view: 'Xem'
    },
    header: {
      title: 'VNPT eKYC',
      hotline: 'Hotline: 1800 1166',
      language: 'Ti·∫øng Vi·ªát'
    },
    steps: {
      step: 'B∆∞·ªõc',
      of: '/',
      documentSelection: 'Ch·ªçn gi·∫•y t·ªù',
      documentCapture: 'Ch·ª•p gi·∫•y t·ªù',
      faceVerification: 'X√°c th·ª±c khu√¥n m·∫∑t',
      review: 'Xem l·∫°i th√¥ng tin'
    },
    documentSelection: {
      title: 'X√°c th·ª±c gi·∫•y t·ªù',
      subtitle: 'Ch·ªçn m·ªôt trong c√°c ph∆∞∆°ng th·ª©c x√°c th·ª±c d∆∞·ªõi ƒë√¢y',
      cccd: 'Ch·ª©ng minh th∆∞, Th·∫ª cƒÉn c∆∞·ªõc',
      passport: 'H·ªô chi·∫øu',
      driver: 'B·∫±ng l√°i xe',
      qr: 'Qu√©t m√£ QR',
      other: 'Gi·∫•y t·ªù kh√°c'
    },
    documentCapture: {
      frontTitle: {
        cccd: 'Ch·ª•p m·∫∑t tr∆∞·ªõc CCCD',
        passport: 'Ch·ª•p trang th√¥ng tin h·ªô chi·∫øu',
        driver: 'Ch·ª•p m·∫∑t tr∆∞·ªõc b·∫±ng l√°i xe'
      },
      backTitle: 'Ch·ª•p m·∫∑t sau CCCD',
      subtitle: 'ƒê∆∞a gi·∫•y t·ªù v√†o khung h√¨nh v√† ch·ª•p ·∫£nh r√µ n√©t',
      instruction: 'ƒê∆∞a gi·∫•y t·ªù v√†o khung h√¨nh v√† nh·∫•n ch·ª•p',
      captureButton: 'CH·ª§P ·∫¢NH',
      uploadButton: 'T·∫¢I ·∫¢NH L√äN',
      guide: 'H∆∞·ªõng d·∫´n'
    },
    qrScanner: {
      title: 'Qu√©t m√£ QR',
      subtitle: 'H∆∞·ªõng camera v√†o m√£ QR ƒë·ªÉ qu√©t th√¥ng tin',
      scanning: 'üîç ƒêang qu√©t m√£ QR...',
      success: '‚úÖ ƒê√£ qu√©t th√†nh c√¥ng!',
      error: '‚ùå Kh√¥ng th·ªÉ qu√©t m√£ QR'
    },
    faceVerification: {
      tutorialTitle: 'H∆∞·ªõng d·∫´n x√°c th·ª±c khu√¥n m·∫∑t',
      tutorialSubtitle: 'Vui l√≤ng xem video ƒë·ªÉ th·ª±c hi·ªán ƒë√∫ng c√°ch v√† ƒë·∫£m b·∫£o t·ª∑ l·ªá th√†nh c√¥ng cao nh·∫•t.',
      tutorialContent: 'Th·ª±c hi·ªán theo c√°c b∆∞·ªõc: Nh√¨n th·∫≥ng ‚Üí M·ªâm c∆∞·ªùi ‚Üí Quay tr√°i ‚Üí Quay ph·∫£i',
      startButton: 'T√¥i ƒë√£ hi·ªÉu, b·∫Øt ƒë·∫ßu!',
      captureTitle: 'X√°c th·ª±c khu√¥n m·∫∑t',
      captureSubtitle: 'Vui l√≤ng gi·ªØ khu√¥n m·∫∑t c·ªßa b·∫°n trong khung h√¨nh oval.',
      instructions: {
        lookStraight: 'Nh√¨n th·∫≥ng v√†o camera',
        smile: 'Vui l√≤ng m·ªâm c∆∞·ªùi t·ª± nhi√™n',
        turnRight: 'T·ª´ t·ª´ quay m·∫∑t sang ph·∫£i',
        turnLeft: 'T·ª´ t·ª´ quay m·∫∑t sang tr√°i',
        complete: 'Ho√†n t·∫•t! ƒêang x·ª≠ l√Ω...'
      },
      faceDetected: 'üë§ ƒê√£ ph√°t hi·ªán khu√¥n m·∫∑t'
    },
    review: {
      title: 'Xem l·∫°i th√¥ng tin',
      subtitle: 'Vui l√≤ng ki·ªÉm tra k·ªπ t·∫•t c·∫£ th√¥ng tin tr∆∞·ªõc khi ho√†n t·∫•t.',
      imagesTitle: 'H√¨nh ·∫£nh ƒë√£ ch·ª•p',
      frontLabel: 'M·∫∑t tr∆∞·ªõc',
      backLabel: 'M·∫∑t sau',
      faceLabel: 'Khu√¥n m·∫∑t',
      qualityGood: 'Ch·∫•t l∆∞·ª£ng t·ªët',
      qualityPoor: 'Ch·∫•t l∆∞·ª£ng k√©m',
      infoTitle: 'Th√¥ng tin tr√≠ch xu·∫•t',
      idNumber: 'S·ªë gi·∫•y t·ªù',
      fullName: 'H·ªç v√† t√™n',
      dateOfBirth: 'Ng√†y sinh',
      address: 'ƒê·ªãa ch·ªâ',
      issueDate: 'Ng√†y c·∫•p',
      expiry: 'Ng√†y h·∫øt h·∫°n',
      faceMatchTitle: 'K·∫øt qu·∫£ so s√°nh khu√¥n m·∫∑t',
      faceMatchHigh: 'Kh·ªõp cao',
      faceMatchMedium: 'Kh·ªõp trung b√¨nh',
      faceMatchLow: 'Kh·ªõp th·∫•p',
      submitButton: 'Ho√†n t·∫•t x√°c th·ª±c',
      retryButton: 'Th·ª±c hi·ªán l·∫°i'
    },
    success: {
      title: 'X√°c th·ª±c th√†nh c√¥ng!',
      subtitle: 'C·∫£m ∆°n b·∫°n ƒë√£ ho√†n t·∫•t qu√° tr√¨nh x√°c th·ª±c eKYC. Th√¥ng tin c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒëi an to√†n.',
      confirmButton: 'X√°c nh·∫≠n'
    },
    errors: {
      cameraAccess: 'Kh√¥ng th·ªÉ truy c·∫≠p camera. Vui l√≤ng cho ph√©p truy c·∫≠p camera.',
      ocrFailed: 'Kh√¥ng th·ªÉ tr√≠ch xu·∫•t th√¥ng tin t·ª´ ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ·∫£nh r√µ n√©t h∆°n.',
      faceNotDetected: 'Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t. Vui l√≤ng ƒë·∫£m b·∫£o khu√¥n m·∫∑t n·∫±m trong khung h√¨nh.',
      qrNotFound: 'Kh√¥ng t√¨m th·∫•y m√£ QR. Vui l√≤ng ƒë·∫£m b·∫£o m√£ QR r√µ n√©t v√† trong khung h√¨nh.',
      validationFailed: 'Th√¥ng tin kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.',
      networkError: 'L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet.',
      sessionExpired: 'Phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n. Vui l√≤ng b·∫Øt ƒë·∫ßu l·∫°i.',
      imageQuality: 'Ch·∫•t l∆∞·ª£ng ·∫£nh kh√¥ng ƒë·∫°t y√™u c·∫ßu.',
      faceMatchFailed: 'Khu√¥n m·∫∑t kh√¥ng kh·ªõp v·ªõi ·∫£nh trong gi·∫•y t·ªù.'
    },
    validation: {
      required: 'Tr∆∞·ªùng n√†y l√† b·∫Øt bu·ªôc',
      invalidFormat: 'ƒê·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá',
      invalidDate: 'Ng√†y kh√¥ng h·ª£p l·ªá',
      invalidId: 'S·ªë gi·∫•y t·ªù kh√¥ng h·ª£p l·ªá',
      imageTooSmall: '·∫¢nh qu√° nh·ªè',
      imageTooLarge: '·∫¢nh qu√° l·ªõn',
      imageTooDark: '·∫¢nh qu√° t·ªëi',
      imageTooLight: '·∫¢nh qu√° s√°ng',
      lowContrast: 'ƒê·ªô t∆∞∆°ng ph·∫£n th·∫•p',
      blurryImage: '·∫¢nh b·ªã m·ªù'
    },
    quality: {
      excellent: 'Xu·∫•t s·∫Øc',
      good: 'T·ªët',
      fair: 'Kh√°',
      poor: 'K√©m',
      recommendations: {
        improveLight: 'C·∫£i thi·ªán √°nh s√°ng',
        avoidGlare: 'Tr√°nh √°nh s√°ng ch√≥i',
        moveCloser: 'Di chuy·ªÉn g·∫ßn h∆°n',
        moveFarther: 'Di chuy·ªÉn xa h∆°n',
        centerDocument: 'CƒÉn gi·ªØa gi·∫•y t·ªù',
        holdSteady: 'Gi·ªØ m√°y ·∫£nh ·ªïn ƒë·ªãnh'
      }
    }
  },
  en: {
    common: {
      loading: 'Loading...',
      error: 'Error',
      success: 'Success',
      cancel: 'Cancel',
      confirm: 'Confirm',
      back: 'Back',
      next: 'Next',
      retry: 'Retry',
      close: 'Close',
      save: 'Save',
      delete: 'Delete',
      edit: 'Edit',
      view: 'View'
    },
    header: {
      title: 'VNPT eKYC',
      hotline: 'Hotline: 1800 1166',
      language: 'English'
    },
    steps: {
      step: 'Step',
      of: ' of ',
      documentSelection: 'Select Document',
      documentCapture: 'Capture Document',
      faceVerification: 'Face Verification',
      review: 'Review Information'
    },
    documentSelection: {
      title: 'Document Verification',
      subtitle: 'Choose one of the verification methods below',
      cccd: 'ID Card, Citizen ID',
      passport: 'Passport',
      driver: 'Driver License',
      qr: 'QR Code Scan',
      other: 'Other Documents'
    },
    documentCapture: {
      frontTitle: {
        cccd: 'Capture Front of ID Card',
        passport: 'Capture Passport Information Page',
        driver: 'Capture Front of Driver License'
      },
      backTitle: 'Capture Back of ID Card',
      subtitle: 'Place document in frame and take a clear photo',
      instruction: 'Place document in frame and press capture',
      captureButton: 'CAPTURE PHOTO',
      uploadButton: 'UPLOAD IMAGE',
      guide: 'Guide'
    },
    qrScanner: {
      title: 'QR Code Scanner',
      subtitle: 'Point camera at QR code to scan information',
      scanning: 'üîç Scanning QR code...',
      success: '‚úÖ Successfully scanned!',
      error: '‚ùå Unable to scan QR code'
    },
    faceVerification: {
      tutorialTitle: 'Face Verification Guide',
      tutorialSubtitle: 'Please watch the video to perform correctly and ensure the highest success rate.',
      tutorialContent: 'Follow these steps: Look straight ‚Üí Smile ‚Üí Turn left ‚Üí Turn right',
      startButton: 'I understand, let\'s start!',
      captureTitle: 'Face Verification',
      captureSubtitle: 'Please keep your face within the oval frame.',
      instructions: {
        lookStraight: 'Look straight at the camera',
        smile: 'Please smile naturally',
        turnRight: 'Slowly turn face to the right',
        turnLeft: 'Slowly turn face to the left',
        complete: 'Complete! Processing...'
      },
      faceDetected: 'üë§ Face detected'
    },
    review: {
      title: 'Review Information',
      subtitle: 'Please carefully check all information before completing.',
      imagesTitle: 'Captured Images',
      frontLabel: 'Front',
      backLabel: 'Back',
      faceLabel: 'Face',
      qualityGood: 'Good Quality',
      qualityPoor: 'Poor Quality',
      infoTitle: 'Extracted Information',
      idNumber: 'ID Number',
      fullName: 'Full Name',
      dateOfBirth: 'Date of Birth',
      address: 'Address',
      issueDate: 'Issue Date',
      expiry: 'Expiry Date',
      faceMatchTitle: 'Face Matching Result',
      faceMatchHigh: 'High Match',
      faceMatchMedium: 'Medium Match',
      faceMatchLow: 'Low Match',
      submitButton: 'Complete Verification',
      retryButton: 'Try Again'
    },
    success: {
      title: 'Verification Successful!',
      subtitle: 'Thank you for completing the eKYC verification process. Your information has been securely submitted.',
      confirmButton: 'Confirm'
    },
    errors: {
      cameraAccess: 'Unable to access camera. Please allow camera access.',
      ocrFailed: 'Unable to extract information from image. Please try again with a clearer image.',
      faceNotDetected: 'Face not detected. Please ensure your face is within the frame.',
      qrNotFound: 'QR code not found. Please ensure QR code is clear and within frame.',
      validationFailed: 'Information is invalid. Please check again.',
      networkError: 'Network connection error. Please check your internet connection.',
      sessionExpired: 'Session has expired. Please start again.',
      imageQuality: 'Image quality does not meet requirements.',
      faceMatchFailed: 'Face does not match the photo in the document.'
    },
    validation: {
      required: 'This field is required',
      invalidFormat: 'Invalid format',
      invalidDate: 'Invalid date',
      invalidId: 'Invalid ID number',
      imageTooSmall: 'Image too small',
      imageTooLarge: 'Image too large',
      imageTooDark: 'Image too dark',
      imageTooLight: 'Image too bright',
      lowContrast: 'Low contrast',
      blurryImage: 'Blurry image'
    },
    quality: {
      excellent: 'Excellent',
      good: 'Good',
      fair: 'Fair',
      poor: 'Poor',
      recommendations: {
        improveLight: 'Improve lighting',
        avoidGlare: 'Avoid glare',
        moveCloser: 'Move closer',
        moveFarther: 'Move farther',
        centerDocument: 'Center document',
        holdSteady: 'Hold camera steady'
      }
    }
  }
};

// Current language state
let currentLanguage: Language = 'vi';

// Get current language
export function getCurrentLanguage(): Language {
  return currentLanguage;
}

// Set language
export function setLanguage(language: Language): void {
  currentLanguage = language;
  // Save to localStorage
  localStorage.setItem('vnpt_ekyc_language', language);
  
  // Dispatch custom event for components to listen
  window.dispatchEvent(new CustomEvent('languageChanged', { detail: language }));
}

// Initialize language from localStorage
export function initializeLanguage(): void {
  const savedLanguage = localStorage.getItem('vnpt_ekyc_language') as Language;
  if (savedLanguage && (savedLanguage === 'vi' || savedLanguage === 'en')) {
    currentLanguage = savedLanguage;
  } else {
    // Detect browser language
    const browserLang = navigator.language.toLowerCase();
    if (browserLang.startsWith('vi')) {
      currentLanguage = 'vi';
    } else {
      currentLanguage = 'en';
    }
  }
}

// Get translation
export function t(key: string): string {
  const keys = key.split('.');
  let value: any = translations[currentLanguage];
  
  for (const k of keys) {
    if (value && typeof value === 'object' && k in value) {
      value = value[k];
    } else {
      console.warn(`Translation key not found: ${key}`);
      return key; // Return key if translation not found
    }
  }
  
  return typeof value === 'string' ? value : key;
}

// Get translation with parameters
export function tp(key: string, params: Record<string, string | number>): string {
  let translation = t(key);
  
  // Replace parameters in format {paramName}
  for (const [paramKey, paramValue] of Object.entries(params)) {
    translation = translation.replace(new RegExp(`{${paramKey}}`, 'g'), String(paramValue));
  }
  
  return translation;
}

// Get all translations for current language
export function getAllTranslations(): TranslationKeys {
  return translations[currentLanguage];
}

// Get available languages
export function getAvailableLanguages(): { code: Language; name: string }[] {
  return [
    { code: 'vi', name: 'Ti·∫øng Vi·ªát' },
    { code: 'en', name: 'English' }
  ];
}

// Format date according to current language
export function formatDate(date: Date | string): string {
  const dateObj = typeof date === 'string' ? new Date(date) : date;
  
  if (currentLanguage === 'vi') {
    return dateObj.toLocaleDateString('vi-VN');
  } else {
    return dateObj.toLocaleDateString('en-US');
  }
}

// Format number according to current language
export function formatNumber(number: number): string {
  if (currentLanguage === 'vi') {
    return number.toLocaleString('vi-VN');
  } else {
    return number.toLocaleString('en-US');
  }
}

// Format currency (Vietnamese Dong)
export function formatCurrency(amount: number): string {
  if (currentLanguage === 'vi') {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  } else {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  }
}

// Get relative time (e.g., "2 minutes ago")
export function getRelativeTime(date: Date | string): string {
  const dateObj = typeof date === 'string' ? new Date(date) : date;
  const now = new Date();
  const diffMs = now.getTime() - dateObj.getTime();
  const diffMinutes = Math.floor(diffMs / (1000 * 60));
  const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

  if (currentLanguage === 'vi') {
    if (diffMinutes < 1) return 'V·ª´a xong';
    if (diffMinutes < 60) return `${diffMinutes} ph√∫t tr∆∞·ªõc`;
    if (diffHours < 24) return `${diffHours} gi·ªù tr∆∞·ªõc`;
    if (diffDays < 30) return `${diffDays} ng√†y tr∆∞·ªõc`;
    return formatDate(dateObj);
  } else {
    if (diffMinutes < 1) return 'Just now';
    if (diffMinutes < 60) return `${diffMinutes} minute${diffMinutes > 1 ? 's' : ''} ago`;
    if (diffHours < 24) return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
    if (diffDays < 30) return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
    return formatDate(dateObj);
  }
}

// React hook for translations
export function useTranslation() {
  const [language, setCurrentLang] = useState(currentLanguage);

  useEffect(() => {
    const handleLanguageChange = (event: CustomEvent) => {
      setCurrentLang(event.detail);
    };

    window.addEventListener('languageChanged', handleLanguageChange as EventListener);
    
    return () => {
      window.removeEventListener('languageChanged', handleLanguageChange as EventListener);
    };
  }, []);

  return {
    t,
    tp,
    language,
    setLanguage,
    formatDate,
    formatNumber,
    formatCurrency,
    getRelativeTime
  };
}

// Initialize language on module load
if (typeof window !== 'undefined') {
  initializeLanguage();
}
